name: Estudo de Caso - Trivy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Subindo o ZAP primeiro
      - name: Iniciar ZAP Container
        run: |
          docker run -d --name zap -p 8080:8080 owasp/zap2docker-stable zap.sh -daemon -port 8080
          docker ps

      # Espera para garantir que o ZAP esteja pronto
      - name: Aguardar ZAP
        run: sleep 20

      # Verificando se o ZAP está acessível
      - name: Testar Conectividade com o ZAP
        run: docker exec zap curl -I http://localhost:8080

      # Construindo a imagem da aplicação
      - name: Generate timestamp
        id: timestamp
        run: echo "now=$(date +%s)" >> $GITHUB_ENV

      - name: Build da Imagem da Aplicação
        run: docker build . --file Dockerfile --tag my-image-name:${{ env.now }}

      # Subindo o container da aplicação
      - name: Iniciar o Container da Aplicação
        run: |
          docker run -d --name app -p 5000:5000 my-image-name:${{ env.now }}
          docker ps

      # Verificando se o app está acessível
      - name: Testar Conectividade com o App
        run: docker exec app curl -I http://localhost:5000

      # Rodando o Trivy para verificar vulnerabilidades
      - name: Analisar Vulnerabilidades com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "my-image-name:${{ env.now }}"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"
          trivyignores: "./trivyignore.yaml"

      # Desligando os containers
      - name: Limpar Containers
        run: |
          docker stop app zap
          docker rm app zap
